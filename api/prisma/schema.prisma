generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role { ADMIN AGENT SALES VIEWER }
enum TicketStatus { NEW OPEN PENDING ON_HOLD SOLVED CLOSED }
enum Priority { LOW NORMAL HIGH URGENT }
enum ChatStatus { OPEN ENDED }
enum SenderType { AGENT CUSTOMER BOT }
enum LeadStatus { NEW WORKING UNQUALIFIED }
enum DealStage { PROSPECTING QUALIFIED PROPOSAL NEGOTIATION CLOSED_WON CLOSED_LOST }
enum ActivityType { CALL MEETING NOTE TASK }
enum CsatRating { GOOD BAD }

/* ===================== MODELS ===================== */
model User {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique
  phone          String?
  role           Role          @default(VIEWER)
  passwordHash   String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  ticketsAssigned Ticket[]       @relation("TicketAssignee")
  ticketComments  TicketComment[] @relation("TicketCommentAuthor")
  activities      Activity[]
  ownedLeads      Lead[]         @relation("LeadOwner")
  ownedContacts   Contact[]      @relation("ContactOwner")
  ownedDeals      Deal[]         @relation("DealOwner")
  auditEvents     AuditEvent[]   @relation("AuditActor")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  phone     String?
  email     String?
  company   String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tickets   Ticket[]
  chats     Chat[]
  contacts  Contact[]
}

model Ticket {
  id           String        @id @default(cuid())
  customer     Customer      @relation(fields: [customerId], references: [id])
  customerId   String
  subject      String
  description  String
  status       TicketStatus  @default(NEW)
  priority     Priority      @default(NORMAL)
  channel      String        @default("web")
  assignee     User?         @relation("TicketAssignee", fields: [assigneeId], references: [id])
  assigneeId   String?
  slaPolicy    SlaPolicy?    @relation(fields: [slaPolicyId], references: [id])
  slaPolicyId  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  closedAt     DateTime?

  comments     TicketComment[]
  tags         TicketTag[]
  slaTimers    SlaTimer?
  csat         CsatSurvey?
}

model TicketComment {
  id            String   @id @default(cuid())
  ticket        Ticket   @relation(fields: [ticketId], references: [id])
  ticketId      String
  author        User?    @relation("TicketCommentAuthor", fields: [authorUserId], references: [id])
  authorUserId  String?
  body          String
  isInternal    Boolean  @default(false)
  createdAt     DateTime @default(now())
}

model TicketTag {
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String
  tag      String

  @@id([ticketId, tag])
}

model Macro {
  id        String   @id @default(cuid())
  title     String
  actions   Json
  createdAt DateTime @default(now())
}

model Trigger {
  id        String   @id @default(cuid())
  name      String
  conditions Json
  actions   Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model SlaPolicy {
  id             String   @id @default(cuid())
  name           String
  firstReplyMins Int
  resolutionMins Int
  priorityScope  Priority?
  createdAt      DateTime @default(now())

  tickets        Ticket[]
}

model SlaTimer {
  id              String   @id @default(cuid())
  ticket          Ticket   @relation(fields: [ticketId], references: [id])
  ticketId        String   @unique
  firstReplyDueAt DateTime?
  resolutionDueAt DateTime?
  firstReplyMet   Boolean  @default(false)
  resolutionMet   Boolean  @default(false)
}

model CsatSurvey {
  id        String     @id @default(cuid())
  ticket    Ticket     @relation(fields: [ticketId], references: [id])
  ticketId  String     @unique
  rating    CsatRating
  comment   String?
  createdAt DateTime   @default(now())
}

model KnowledgeCategory {
  id       String            @id @default(cuid())
  name     String
  slug     String            @unique
  articles KnowledgeArticle[]
}

model KnowledgeArticle {
  id            String             @id @default(cuid())
  category      KnowledgeCategory  @relation(fields: [categoryId], references: [id])
  categoryId    String
  title         String
  slug          String             @unique
  bodyMarkdown  String
  isPublished   Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  suggestedIn   ChatMessage[]      @relation("MsgSuggestedArticle")
}

model Chat {
  id         String      @id @default(cuid())
  customer   Customer    @relation(fields: [customerId], references: [id])
  customerId String
  status     ChatStatus  @default(OPEN)
  createdAt  DateTime    @default(now())
  endedAt    DateTime?

  messages   ChatMessage[]
}

model ChatMessage {
  id                 String            @id @default(cuid())
  chat               Chat              @relation(fields: [chatId], references: [id])
  chatId             String
  senderType         SenderType
  body               String
  suggestedArticle   KnowledgeArticle? @relation("MsgSuggestedArticle", fields: [suggestedArticleId], references: [id])
  suggestedArticleId String?
  createdAt          DateTime          @default(now())
}

model BotRule {
  id             String   @id @default(cuid())
  name           String
  matchType      String
  pattern        String
  responseType   String
  responsePayload Json
  createdAt      DateTime @default(now())
}

model Lead {
  id         String      @id @default(cuid())
  name       String
  company    String?
  phone      String?
  email      String?
  source     String?
  owner      User?       @relation("LeadOwner", fields: [ownerId], references: [id])
  ownerId    String?
  status     LeadStatus  @default(NEW)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  activities Activity[]
}

model Contact {
  id         String    @id @default(cuid())
  customer   Customer  @relation(fields: [customerId], references: [id])
  customerId String
  owner      User?     @relation("ContactOwner", fields: [ownerId], references: [id])
  ownerId    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  deals      Deal[]
  activities Activity[]
}

model Deal {
  id                String    @id @default(cuid())
  contact           Contact   @relation(fields: [contactId], references: [id])
  contactId         String
  title             String
  amountNumeric     Decimal?  @db.Decimal(12,2)
  stage             DealStage @default(PROSPECTING)
  owner             User?     @relation("DealOwner", fields: [ownerId], references: [id])
  ownerId           String?
  expectedCloseDate DateTime?
  closedAt          DateTime?
  outcome           String?
  lossReason        String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  activities        Activity[] @relation("DealActivities")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  note        String?
  dueAt       DateTime?
  completedAt DateTime?
  owner       User?        @relation(fields: [ownerId], references: [id])
  ownerId     String?
  createdAt   DateTime     @default(now())

  lead        Lead?        @relation(fields: [leadId], references: [id])
  leadId      String?
  contact     Contact?     @relation(fields: [contactId], references: [id])
  contactId   String?
  deal        Deal?        @relation("DealActivities", fields: [dealId], references: [id])
  dealId      String?
}

model AuditEvent {
  id          String   @id @default(cuid())
  entity      String
  entityId    String
  action      String
  actorUser   User?    @relation("AuditActor", fields: [actorUserId], references: [id])
  actorUserId String?
  payload     Json
  createdAt   DateTime @default(now())
}

